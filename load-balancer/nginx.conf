# Required to use the OTEL module
load_module modules/ngx_otel_module.so;
events {}

http {
    # Turn tracing on for http traffic
    otel_trace on;

    # If you are at the start of the request, this context
    # will be created by the library and consumed by downstream
    # services. Required if you want traces to be connected to each
    # other across services ("distributed tracing")
    otel_trace_context inject;

    # This is how the NGINX server will appear in your trace viewer
    otel_service_name "new_lb";

    # You can configure specifics about how the traces are transferred
    # The only required element is the `endpoint` directive
    otel_exporter {
        endpoint jaeger:4317;
    }

    upstream messenger {
        server host.docker.internal:4000;
    }

    server {
        # Custom attributes may be set from variables or
        # hardcoded
        otel_span_attr "worker_pid" $pid;

        # This custom attribute will be sent as an 
        # empty value if the header is not supplied
        otel_span_attr "account_id" $http_account_id;

        listen 8085;

        location / {
            proxy_pass http://messenger;
        }
    }
}
